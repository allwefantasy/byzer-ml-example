[{"kind":1,"language":"markdown","value":"## Native UDF\n\nByzer-lang supports the user-defined function (UDF) written in Java/scala. You can use the `register` statement to register the UDF to the system. Then you can use the UDF in the `select` statement immediately without restarting the system.\n\nWe strongly recommend that you use the scala to write the UDF since the scala is simpler and more powerful than the Java.\n\nThere are three parts in the register statement:\n\n1. lang: scala/java\n2. code: the scala/java snippet\n3. udfType: udf/udaf","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"content\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"mime\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": []\n}"}]},{"kind":2,"language":"mlsql","value":"register ScriptUDF.`` as arrayLast \nwhere lang=\"scala\"\nand code='''def apply(a:Seq[String])={\n      a.last\n}'''\nand udfType=\"udf\";","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"key\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"value\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": []\n}"}]},{"kind":2,"language":"mlsql","value":"select arrayLast(array(\"a\",\"b\")) as lastChar as output;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"lastChar\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"lastChar\": \"b\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"Here is an example of java UDF","outputs":[]},{"kind":2,"language":"mlsql","value":"register ScriptUDF.`` AS echoFun WHERE \nand lang=\"java\"\nand udfType=\"udf\"\nand className=\"Test\"\nand methodName=\"test\"\nand code='''\nimport java.util.HashMap;\nimport java.util.Map;\npublic class Test {\n    public Map<String, String> test(String s) {\n      Map m = new HashMap<>();\n      m.put(s, s);\n      return m;\n  }\n}\n''';","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"key\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"value\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": []\n}"}]},{"kind":2,"language":"mlsql","value":"set data='''{\"a\":\"a\"}''';\nload jsonStr.`data` as dataTable;\nselect echoFun(a) as res from dataTable as output;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"res\",\n\t\t\t\t\"type\": {\n\t\t\t\t\t\"type\": \"map\",\n\t\t\t\t\t\"keyType\": \"string\",\n\t\t\t\t\t\"valueType\": \"string\",\n\t\t\t\t\t\"valueContainsNull\": true\n\t\t\t\t},\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"res\": {\n\t\t\t\t\"a\": \"a\"\n\t\t\t}\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"## UDAF Example","outputs":[]},{"kind":2,"language":"mlsql","value":"set udafScript='''\nimport org.apache.spark.sql.expressions.{MutableAggregationBuffer, UserDefinedAggregateFunction}\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\nclass SumAggregation extends UserDefinedAggregateFunction with Serializable{\n    def inputSchema: StructType = new StructType().add(\"a\", LongType)\n    def bufferSchema: StructType =  new StructType().add(\"total\", LongType)\n    def dataType: DataType = LongType\n    def deterministic: Boolean = true\n    def initialize(buffer: MutableAggregationBuffer): Unit = {\n      buffer.update(0, 0l)\n    }\n    def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n      val sum   = buffer.getLong(0)\n      val newitem = input.getLong(0)\n      buffer.update(0, sum + newitem)\n    }\n    def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n      buffer1.update(0, buffer1.getLong(0) + buffer2.getLong(0))\n    }\n    def evaluate(buffer: Row): Any = {\n      buffer.getLong(0)\n    }\n}\n''';\n\nload script.`udafScript` as udafScriptTable;\n\nregister ScriptUDF.`udafScriptTable` AS sumAggregation options\nclassName=\"SumAggregation\"\nand udfType=\"udaf\";","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"key\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"value\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": []\n}"}]},{"kind":2,"language":"mlsql","value":"SET data='''\n{\"a\":1}\n{\"a\":1}\n{\"a\":1}\n{\"a\":1}\n''';\nLOAD jsonStr.`data` AS dataTable;\n\nSELECT a,sumAggregation(a) AS res FROM dataTable GROUP BY a AS output;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"a\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"res\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"a\": 1,\n\t\t\t\"res\": 4\n\t\t}\n\t]\n}"}]}]