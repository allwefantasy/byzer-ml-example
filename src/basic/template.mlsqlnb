[{"kind":1,"language":"markdown","value":"# Template\n\nByzer supports template programming to generate SQL statements. The template is a SQL statement with placeholders. The placeholders are defined by `${}`. For example, the following SQL statement is a template:\n\n```sql\nset columns = \"income,age\";\n\nselect \n#foreach($column in $columns.split(\",\"))\n  case when ${column} > 0 then 1 else 0 end as ${column},\n#end\nname\nfrom table1 as table2;\n```\n\nThe code above declare a variable `columns` and use it in the `select` statement. The `#foreach` statement is used to iterate the variable `columns`. The `split` function is used to split the string by `,`. The `case when` statement is used to generate the `case when` statement for each column.","outputs":[]},{"kind":2,"language":"mlsql","value":"set abc='''\n{\"name\": \"elena\", \"age\": 57, \"phone\": 15552231521, \"income\": 433000, \"label\": 0}\n{\"name\": \"candy\", \"age\": 67, \"phone\": 15552231521, \"income\": 1200, \"label\": 0}\n{\"name\": \"bob\", \"age\": 57, \"phone\": 15252211521, \"income\": 89000, \"label\": 0}\n{\"name\": \"candy\", \"age\": 25, \"phone\": 15552211522, \"income\": 36000, \"label\": 1}\n{\"name\": \"candy\", \"age\": 31, \"phone\": 15552211521, \"income\": 300000, \"label\": 1}\n{\"name\": \"finn\", \"age\": 23, \"phone\": 15552211521, \"income\": 238000, \"label\": 1}\n''';\n\n\nload jsonStr.`abc` as table1;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"age\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"income\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"label\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"name\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"phone\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"age\": 57,\n\t\t\t\"income\": 433000,\n\t\t\t\"label\": 0,\n\t\t\t\"name\": \"elena\",\n\t\t\t\"phone\": 15552231521\n\t\t},\n\t\t{\n\t\t\t\"age\": 67,\n\t\t\t\"income\": 1200,\n\t\t\t\"label\": 0,\n\t\t\t\"name\": \"candy\",\n\t\t\t\"phone\": 15552231521\n\t\t},\n\t\t{\n\t\t\t\"age\": 57,\n\t\t\t\"income\": 89000,\n\t\t\t\"label\": 0,\n\t\t\t\"name\": \"bob\",\n\t\t\t\"phone\": 15252211521\n\t\t},\n\t\t{\n\t\t\t\"age\": 25,\n\t\t\t\"income\": 36000,\n\t\t\t\"label\": 1,\n\t\t\t\"name\": \"candy\",\n\t\t\t\"phone\": 15552211522\n\t\t},\n\t\t{\n\t\t\t\"age\": 31,\n\t\t\t\"income\": 300000,\n\t\t\t\"label\": 1,\n\t\t\t\"name\": \"candy\",\n\t\t\t\"phone\": 15552211521\n\t\t},\n\t\t{\n\t\t\t\"age\": 23,\n\t\t\t\"income\": 238000,\n\t\t\t\"label\": 1,\n\t\t\t\"name\": \"finn\",\n\t\t\t\"phone\": 15552211521\n\t\t}\n\t]\n}"}]},{"kind":2,"language":"mlsql","value":"set columns = \"income,age\";\n\nselect \n#foreach($column in $columns.split(\",\"))\n  case when ${column} > 0 then 1 else 0 end as ${column},\n#end\nname\nfrom table1 as table2;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"income\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"age\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"name\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1,\n\t\t\t\"name\": \"elena\"\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1,\n\t\t\t\"name\": \"candy\"\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1,\n\t\t\t\"name\": \"bob\"\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1,\n\t\t\t\"name\": \"candy\"\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1,\n\t\t\t\"name\": \"candy\"\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1,\n\t\t\t\"name\": \"finn\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"## Reverse columns with template\n\nWe can use the following command to get table3 which contains all column names in table2.\nThen try to set a new \n","outputs":[]},{"kind":2,"language":"mlsql","value":"!desc table2;\n!lastCommand named table3;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"col_name\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"comment\": \"name of the column\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"data_type\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"comment\": \"data type of the column\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"comment\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"comment\": \"comment of the column\"\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"col_name\": \"income\",\n\t\t\t\"data_type\": \"int\"\n\t\t},\n\t\t{\n\t\t\t\"col_name\": \"age\",\n\t\t\t\"data_type\": \"int\"\n\t\t},\n\t\t{\n\t\t\t\"col_name\": \"name\",\n\t\t\t\"data_type\": \"string\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"The following code is to reverse the columns sequence:","outputs":[]},{"kind":2,"language":"mlsql","value":"set newColumns=`select concat_ws(\",\",collect_list(col_name)) from table3` \nwhere type=\"sql\" and mode=\"runtime\";\n\nselect \n#set($list=$newColumns.split(\",\"))\n#set($max = $list.size() - 1)\n#foreach($i in [ $max ..  0 ])\n  #if($i == 0)\n    $list[$i]\n  #else\n    $list[$i],\n  #end\n#end\nfrom table2 as output;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"name\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"age\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"income\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"name\": \"elena\",\n\t\t\t\"age\": 1,\n\t\t\t\"income\": 1\n\t\t},\n\t\t{\n\t\t\t\"name\": \"candy\",\n\t\t\t\"age\": 1,\n\t\t\t\"income\": 1\n\t\t},\n\t\t{\n\t\t\t\"name\": \"bob\",\n\t\t\t\"age\": 1,\n\t\t\t\"income\": 1\n\t\t},\n\t\t{\n\t\t\t\"name\": \"candy\",\n\t\t\t\"age\": 1,\n\t\t\t\"income\": 1\n\t\t},\n\t\t{\n\t\t\t\"name\": \"candy\",\n\t\t\t\"age\": 1,\n\t\t\t\"income\": 1\n\t\t},\n\t\t{\n\t\t\t\"name\": \"finn\",\n\t\t\t\"age\": 1,\n\t\t\t\"income\": 1\n\t\t}\n\t]\n}"}]},{"kind":2,"language":"mlsql","value":"set casewhen = '''\ncase when {0} > 0 then 1 else 0 end as {0}\n''';\n\n\nselect ${template.get(\"casewhen\",\"income\")},\n${template.get(\"casewhen\",\"age\")}\nfrom table1 as output;\n","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"income\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"age\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1\n\t\t},\n\t\t{\n\t\t\t\"income\": 1,\n\t\t\t\"age\": 1\n\t\t}\n\t]\n}"}]}]