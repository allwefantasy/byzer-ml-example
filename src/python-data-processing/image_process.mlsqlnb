[{"kind":1,"language":"markdown","value":"## Image Processing\n\nIn this notebook, we will show you how to download images from the Internet and process them Byzer-lang and how to save the processed images to delta lake or to the local file system.\n\nWe will combine the [OpenCV](https://opencv.org/) library to process images in Byzer. The [OpenCV-Python](https://pypi.org/project/opencv-python/) package is the way to access the OpenCV library from Python.\n\nPlease make sure you have installed the OpenCV-Python package in your Python environment. You can install it by running the following command in your Python environment:\n\n```bash\nconda activate ray-2.3.0\npip install opencv-python\n```\n","outputs":[]},{"kind":2,"language":"mlsql","value":"!sh wget \"https://github.com/allwefantasy/spark-deep-learning-toy/releases/download/v0.01/cifar.tgz\";","outputs":[]},{"kind":1,"language":"markdown","value":"The shell command is executed in driver node. \n\nIf you are using the HDFS/Object Store as the default FileSystem, you can use command `!copyFromLocal` to upload the directory to hdfs/object store.\n\n> !sh, !copyFromLocal are all in extension `mlsql-shell` which is included in Byzer Desktop by default.\n\nHere is how we use `!copyFromLocal`:\n\n```shell\n!copyFromLocal /tmp/cifar10 /jack/tmp/cifar10;\n```","outputs":[]},{"kind":2,"language":"mlsql","value":"!sh mkdir -p /tmp/cifar10;\n!sh tar -xf \"cifar.tgz\" \"-C\" \"/tmp/cifar10\";","outputs":[]},{"kind":2,"language":"mlsql","value":"-- load all images with binaryFile\nload binaryFile.`/tmp/cifar10/cifar/train/*.png` as cifar10;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- repartition the data and save the image data to delta-lake,\n-- with the detla lake support ,we can speed up the reading of data.\n\nrun cifar10 as TableRepartition.`` where partitionNum=\"4\" as newCifar10;\nsave overwrite newCifar10 as delta.`data.raw_cifar10` where mergeSchema=\"true\";","outputs":[]},{"kind":2,"language":"mlsql","value":"-- load the images from delta lake and count the number of images\n\nload delta.`data.raw_cifar10` as raw_cifar10_table;\nselect count(*) from raw_cifar10_table  as output;","outputs":[]},{"kind":2,"language":"python","value":"#%python\n#%input=raw_cifar10_table\n#%output=cifar10_resize\n#%cache=true\n#%schema=st(field(content,binary),field(path,string))\n#%dataMode=data\n\n\n## here, we use the `env` instead of `pythonExec` to set the python environment in MacOS\n## Because without OBJC_DISABLE_INITIALIZE_FORK_SAFETY set in MacOS, the system is not compatible with Ray\n## Notice that if you are in in windows, try to use `pythonExec` instead of `python env`\n#%env=source /opt/miniconda3/bin/activate ray-2.3.0 && export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n\nimport io,cv2,numpy as np\nfrom pyjava import RayContext\n\nray_context = RayContext.connect(globals(),\"127.0.0.1:10001\")\n\ndef resize_image(row):\n    new_row = {}\n    image_bin = row[\"content\"]    \n    oriimg = cv2.imdecode(np.frombuffer(io.BytesIO(image_bin).getbuffer(),np.uint8),1)\n    newimage = cv2.resize(oriimg,(28,28))\n    is_success, buffer = cv2.imencode(\".png\", newimage)\n    io_buf = io.BytesIO(buffer)\n    new_row[\"content\"]=io_buf.getvalue()\n    new_row[\"path\"]= row[\"path\"]    \n    return new_row\n\nray_context.foreach(resize_image)","outputs":[]},{"kind":2,"language":"mlsql","value":"-- save the processed data to delta lake again.\nsave overwrite cifar10_resize as delta.`data.cifar10x28x28`;\nload delta.`data.cifar10x28x28` as cifar10_resize;","outputs":[]},{"kind":2,"language":"mlsql","value":"-- create a UDF function called arrayLast to get the last element of an array\n-- the UDF function is written in scala\nregister ScriptUDF.`` as arrayLast where \nlang=\"scala\"\nand code='''def apply(a:Seq[String])={\n      a.last\n}'''\nand udfType=\"udf\";","outputs":[]},{"kind":2,"language":"mlsql","value":"\n-- get the file name and image data from the delta lake table\nselect arrayLast(split(path,\"/\")) as fileName,content  \nfrom cifar10_resize \nas final_dataset;\n\n-- save the images to image format\nsave overwrite final_dataset as image.`/tmp/size-28x28` \nwhere imageColumn=\"content\" \nand fileName=\"fileName\";","outputs":[]}]