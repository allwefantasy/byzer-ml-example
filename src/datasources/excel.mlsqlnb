[{"kind":1,"language":"markdown","value":"## Excel\n\nIn this notebook, we will show how to use Byzer to read/save Excel files.\n\n> This example was written in Lhasa, which is a high-altitude city located at an elevation of over 4000 meters.","outputs":[]},{"kind":2,"language":"mlsql","value":"-- load excel file with the first row as header and data from the sheet named \"roles\"\n-- the data is loaded into a table named \"hello_world\"\n-- note that the dataAddress if not specified, the first sheet in the excel file is loaded\n\nload excel.`./example-data/hello_world.xlsx` \nwhere header=\"true\" \nand dataAddress=\"roles\"\nas hello_world;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"hello\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_c1\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_c2\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"hello\": \"world2\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"In the following example, We will use  the comment option to tell Byzer to ignore any rows that start with the comment character when reading the Excel file..\n\nThe comment option is set to `#`, assuming that `#` is used to indicate a comment line in the Excel file. You can replace this with the actual comment character used in your file.\n\nBy setting header and inferSchema to true, Byzer will automatically detect the header row and infer the data types of the columns. \n\nNotice that `#` is a speicial charactor in Byzer template grammar. So we need to escape it with `#[[ ESCAPSE CHARACRTORS ]]#`.","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/hello_world.xlsx` \nwhere header=\"true\" \n-- Set the comment character to '#' (replace with your own)\nand comment=\"#[[#]]#\"\nand dataAddress=\"comment\"\nas hello_world;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"hello\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_c1\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"_c2\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"hello\": \"world2\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"In the following example, we're reading in an Excel file located at \"./example-data/hello_world.xlsx\". We're using the dataAddress option to specify that we only want to read in the cells in the range \"B6:C7\" on the \"comment2\" worksheet. \n\nThis is very useful when you just want to read a part of the worksheet. ","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/hello_world.xlsx` \nwhere header=\"true\" \nand dataAddress=\"'comment2'!B6:C7\"\nas hello_world;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"col1\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"col2\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"col1\": \"你\",\n\t\t\t\"col2\": \"好\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"If the excel file is large, we can control the memory usage with some options.\n\nIn the following example, we've set the `maxRowsInMemory` option to 1000, which means that Byzer will only keep up to 1000 rows in memory at a time when reading the Excel file. If there are more than 1000 rows in the file, Byzer\n will read them in batches of 1000 rows.\n\n We've also set the maxRowsPerSheet option to 10000, which means that Byzer will only read up to 10000 rows from each worksheet in the Excel file. If a worksheet has more than 10000 rows, Byzer will only read the first 10000 rows and ignore the rest.","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/hello_world.xlsx` \nwhere header=\"true\" \nand dataAddress=\"'comment2'!B6:C7\"\nand maxRowsInMemory=\"1000\"\nand maxRowsPerSheet=\"10000\"\nas hello_world;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"col1\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"col2\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"col1\": \"你\",\n\t\t\t\"col2\": \"好\"\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"In the following exmaple, we we show you how to read/write date/timestamp format.","outputs":[]},{"kind":2,"language":"mlsql","value":"load excel.`./example-data/hello_world.xlsx` \nwhere header=\"true\" \nand inferSchema=\"true\"\nand dataAddress=\"'dateformat'!A1:B3\"\nand dateFormat=\"yyyy/MM/dd\"\nas hello_world;\n\n-- you can check the schema with the following command:\n-- !desc hello_world;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"col1\",\n\t\t\t\t\"type\": \"timestamp\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"col2\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"col1\": \"2018-01-02T00:00:00.000+08:00\",\n\t\t\t\"col2\": 7\n\t\t},\n\t\t{\n\t\t\t\"col1\": \"2018-02-02T00:00:00.000+08:00\",\n\t\t\t\"col2\": 10\n\t\t}\n\t]\n}"}]},{"kind":2,"language":"mlsql","value":"-- you can use save to create a excel file.\nsave overwrite hello_world as excel.`/tmp/hellow.xlsx` \nwhere header=\"true\" and dateFormat=\"yyyy-MM-dd\";","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"jobType\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"jobName\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"jobContent\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"groupId\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"progress\",\n\t\t\t\t\"type\": {\n\t\t\t\t\t\"type\": \"struct\",\n\t\t\t\t\t\"fields\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"totalJob\",\n\t\t\t\t\t\t\t\"type\": \"long\",\n\t\t\t\t\t\t\t\"nullable\": false,\n\t\t\t\t\t\t\t\"metadata\": {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"currentJobIndex\",\n\t\t\t\t\t\t\t\"type\": \"long\",\n\t\t\t\t\t\t\t\"nullable\": false,\n\t\t\t\t\t\t\t\"metadata\": {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"script\",\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"nullable\": true,\n\t\t\t\t\t\t\t\"metadata\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"startTime\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"timeout\",\n\t\t\t\t\"type\": \"long\",\n\t\t\t\t\"nullable\": false,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"owner\": \"admin\",\n\t\t\t\"jobType\": \"script\",\n\t\t\t\"jobName\": \"5c8bf795-0361-462f-ac24-4f2c992e182a\",\n\t\t\t\"jobContent\": \"-- you can use save to create a excel file.\\nsave overwrite hello_world as excel.`/tmp/hellow.xlsx` \\nwhere header=\\\"true\\\" and dateFormat=\\\"yyyy-MM-dd\\\";\",\n\t\t\t\"groupId\": \"027bf4a3-93c8-42f1-8ab2-3c3dabb74d90\",\n\t\t\t\"progress\": {\n\t\t\t\t\"totalJob\": 1,\n\t\t\t\t\"currentJobIndex\": 1,\n\t\t\t\t\"script\": \"save overwrite hello_world as excel.`/tmp/hellow.xlsx` \\nwhere header=\\\"true\\\" and dateFormat=\\\"yyyy-MM-dd\\\"\"\n\t\t\t},\n\t\t\t\"startTime\": 1679367899400,\n\t\t\t\"timeout\": -1\n\t\t}\n\t]\n}"}]}]